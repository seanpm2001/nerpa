// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `p4/v1/p4data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct P4Data {
    // message oneof groups
    pub data: ::std::option::Option<P4Data_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4Data {
    fn default() -> &'a P4Data {
        <P4Data as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum P4Data_oneof_data {
    bitstring(::std::vec::Vec<u8>),
    varbit(P4Varbit),
    bool(bool),
    tuple(P4StructLike),
    field_struct(P4StructLike),
    header(P4Header),
    header_union(P4HeaderUnion),
    header_stack(P4HeaderStack),
    header_union_stack(P4HeaderUnionStack),
    field_enum(::std::string::String),
    error(::std::string::String),
    enum_value(::std::vec::Vec<u8>),
}

impl P4Data {
    pub fn new() -> P4Data {
        ::std::default::Default::default()
    }

    // bytes bitstring = 1;


    pub fn get_bitstring(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::bitstring(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_bitstring(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_bitstring(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::bitstring(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bitstring(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::bitstring(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bitstring(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(P4Data_oneof_data::bitstring(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::bitstring(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::bitstring(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bitstring(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_bitstring() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::bitstring(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .p4.v1.P4Varbit varbit = 2;


    pub fn get_varbit(&self) -> &P4Varbit {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::varbit(ref v)) => v,
            _ => <P4Varbit as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_varbit(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_varbit(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::varbit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_varbit(&mut self, v: P4Varbit) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::varbit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_varbit(&mut self) -> &mut P4Varbit {
        if let ::std::option::Option::Some(P4Data_oneof_data::varbit(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::varbit(P4Varbit::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::varbit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_varbit(&mut self) -> P4Varbit {
        if self.has_varbit() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::varbit(v)) => v,
                _ => panic!(),
            }
        } else {
            P4Varbit::new()
        }
    }

    // bool bool = 3;


    pub fn get_bool(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::bool(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_bool(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::bool(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool(&mut self, v: bool) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::bool(v))
    }

    // .p4.v1.P4StructLike tuple = 4;


    pub fn get_tuple(&self) -> &P4StructLike {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::tuple(ref v)) => v,
            _ => <P4StructLike as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tuple(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_tuple(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::tuple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tuple(&mut self, v: P4StructLike) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::tuple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tuple(&mut self) -> &mut P4StructLike {
        if let ::std::option::Option::Some(P4Data_oneof_data::tuple(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::tuple(P4StructLike::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::tuple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tuple(&mut self) -> P4StructLike {
        if self.has_tuple() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::tuple(v)) => v,
                _ => panic!(),
            }
        } else {
            P4StructLike::new()
        }
    }

    // .p4.v1.P4StructLike struct = 5;


    pub fn get_field_struct(&self) -> &P4StructLike {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::field_struct(ref v)) => v,
            _ => <P4StructLike as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_field_struct(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_field_struct(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::field_struct(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_struct(&mut self, v: P4StructLike) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::field_struct(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_struct(&mut self) -> &mut P4StructLike {
        if let ::std::option::Option::Some(P4Data_oneof_data::field_struct(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::field_struct(P4StructLike::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::field_struct(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_struct(&mut self) -> P4StructLike {
        if self.has_field_struct() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::field_struct(v)) => v,
                _ => panic!(),
            }
        } else {
            P4StructLike::new()
        }
    }

    // .p4.v1.P4Header header = 6;


    pub fn get_header(&self) -> &P4Header {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header(ref v)) => v,
            _ => <P4Header as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_header(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: P4Header) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::header(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header(&mut self) -> &mut P4Header {
        if let ::std::option::Option::Some(P4Data_oneof_data::header(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::header(P4Header::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header(&mut self) -> P4Header {
        if self.has_header() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::header(v)) => v,
                _ => panic!(),
            }
        } else {
            P4Header::new()
        }
    }

    // .p4.v1.P4HeaderUnion header_union = 7;


    pub fn get_header_union(&self) -> &P4HeaderUnion {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_union(ref v)) => v,
            _ => <P4HeaderUnion as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_union(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_header_union(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_union(&mut self, v: P4HeaderUnion) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::header_union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_union(&mut self) -> &mut P4HeaderUnion {
        if let ::std::option::Option::Some(P4Data_oneof_data::header_union(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::header_union(P4HeaderUnion::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_union(&mut self) -> P4HeaderUnion {
        if self.has_header_union() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::header_union(v)) => v,
                _ => panic!(),
            }
        } else {
            P4HeaderUnion::new()
        }
    }

    // .p4.v1.P4HeaderStack header_stack = 8;


    pub fn get_header_stack(&self) -> &P4HeaderStack {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_stack(ref v)) => v,
            _ => <P4HeaderStack as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_stack(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_header_stack(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_stack(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_stack(&mut self, v: P4HeaderStack) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::header_stack(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_stack(&mut self) -> &mut P4HeaderStack {
        if let ::std::option::Option::Some(P4Data_oneof_data::header_stack(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::header_stack(P4HeaderStack::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_stack(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_stack(&mut self) -> P4HeaderStack {
        if self.has_header_stack() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::header_stack(v)) => v,
                _ => panic!(),
            }
        } else {
            P4HeaderStack::new()
        }
    }

    // .p4.v1.P4HeaderUnionStack header_union_stack = 9;


    pub fn get_header_union_stack(&self) -> &P4HeaderUnionStack {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(ref v)) => v,
            _ => <P4HeaderUnionStack as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_union_stack(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_header_union_stack(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_union_stack(&mut self, v: P4HeaderUnionStack) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_union_stack(&mut self) -> &mut P4HeaderUnionStack {
        if let ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(P4HeaderUnionStack::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_union_stack(&mut self) -> P4HeaderUnionStack {
        if self.has_header_union_stack() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(v)) => v,
                _ => panic!(),
            }
        } else {
            P4HeaderUnionStack::new()
        }
    }

    // string enum = 10;


    pub fn get_field_enum(&self) -> &str {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::field_enum(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_field_enum(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_field_enum(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::field_enum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_enum(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::field_enum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_enum(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(P4Data_oneof_data::field_enum(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::field_enum(::std::string::String::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::field_enum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_enum(&mut self) -> ::std::string::String {
        if self.has_field_enum() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::field_enum(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string error = 11;


    pub fn get_error(&self) -> &str {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::error(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_error(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(P4Data_oneof_data::error(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::error(::std::string::String::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        if self.has_error() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::error(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes enum_value = 12;


    pub fn get_enum_value(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::enum_value(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_enum_value(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_enum_value(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::enum_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enum_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(P4Data_oneof_data::enum_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enum_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(P4Data_oneof_data::enum_value(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(P4Data_oneof_data::enum_value(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(P4Data_oneof_data::enum_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enum_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_enum_value() {
            match self.data.take() {
                ::std::option::Option::Some(P4Data_oneof_data::enum_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for P4Data {
    fn is_initialized(&self) -> bool {
        if let Some(P4Data_oneof_data::varbit(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(P4Data_oneof_data::tuple(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(P4Data_oneof_data::field_struct(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(P4Data_oneof_data::header(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(P4Data_oneof_data::header_union(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(P4Data_oneof_data::header_stack(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(P4Data_oneof_data::header_union_stack(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::bitstring(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::varbit(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::bool(is.read_bool()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::tuple(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::field_struct(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::header(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::header_union(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::header_stack(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::header_union_stack(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::field_enum(is.read_string()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::error(is.read_string()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(P4Data_oneof_data::enum_value(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &P4Data_oneof_data::bitstring(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &P4Data_oneof_data::varbit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::bool(v) => {
                    my_size += 2;
                },
                &P4Data_oneof_data::tuple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::field_struct(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::header(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::header_union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::header_stack(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::header_union_stack(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &P4Data_oneof_data::field_enum(ref v) => {
                    my_size += ::protobuf::rt::string_size(10, &v);
                },
                &P4Data_oneof_data::error(ref v) => {
                    my_size += ::protobuf::rt::string_size(11, &v);
                },
                &P4Data_oneof_data::enum_value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(12, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &P4Data_oneof_data::bitstring(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &P4Data_oneof_data::varbit(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::bool(v) => {
                    os.write_bool(3, v)?;
                },
                &P4Data_oneof_data::tuple(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::field_struct(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::header(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::header_union(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::header_stack(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::header_union_stack(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &P4Data_oneof_data::field_enum(ref v) => {
                    os.write_string(10, v)?;
                },
                &P4Data_oneof_data::error(ref v) => {
                    os.write_string(11, v)?;
                },
                &P4Data_oneof_data::enum_value(ref v) => {
                    os.write_bytes(12, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4Data {
        P4Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "bitstring",
                P4Data::has_bitstring,
                P4Data::get_bitstring,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4Varbit>(
                "varbit",
                P4Data::has_varbit,
                P4Data::get_varbit,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool",
                P4Data::has_bool,
                P4Data::get_bool,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4StructLike>(
                "tuple",
                P4Data::has_tuple,
                P4Data::get_tuple,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4StructLike>(
                "struct",
                P4Data::has_field_struct,
                P4Data::get_field_struct,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4Header>(
                "header",
                P4Data::has_header,
                P4Data::get_header,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4HeaderUnion>(
                "header_union",
                P4Data::has_header_union,
                P4Data::get_header_union,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4HeaderStack>(
                "header_stack",
                P4Data::has_header_stack,
                P4Data::get_header_stack,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, P4HeaderUnionStack>(
                "header_union_stack",
                P4Data::has_header_union_stack,
                P4Data::get_header_union_stack,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "enum",
                P4Data::has_field_enum,
                P4Data::get_field_enum,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "error",
                P4Data::has_error,
                P4Data::get_error,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "enum_value",
                P4Data::has_enum_value,
                P4Data::get_enum_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4Data>(
                "P4Data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4Data {
        static instance: ::protobuf::rt::LazyV2<P4Data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4Data::new)
    }
}

impl ::protobuf::Clear for P4Data {
    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4Data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct P4Varbit {
    // message fields
    pub bitstring: ::std::vec::Vec<u8>,
    pub bitwidth: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4Varbit {
    fn default() -> &'a P4Varbit {
        <P4Varbit as ::protobuf::Message>::default_instance()
    }
}

impl P4Varbit {
    pub fn new() -> P4Varbit {
        ::std::default::Default::default()
    }

    // bytes bitstring = 1;


    pub fn get_bitstring(&self) -> &[u8] {
        &self.bitstring
    }
    pub fn clear_bitstring(&mut self) {
        self.bitstring.clear();
    }

    // Param is passed by value, moved
    pub fn set_bitstring(&mut self, v: ::std::vec::Vec<u8>) {
        self.bitstring = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bitstring(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bitstring
    }

    // Take field
    pub fn take_bitstring(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bitstring, ::std::vec::Vec::new())
    }

    // int32 bitwidth = 2;


    pub fn get_bitwidth(&self) -> i32 {
        self.bitwidth
    }
    pub fn clear_bitwidth(&mut self) {
        self.bitwidth = 0;
    }

    // Param is passed by value, moved
    pub fn set_bitwidth(&mut self, v: i32) {
        self.bitwidth = v;
    }
}

impl ::protobuf::Message for P4Varbit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bitstring)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.bitwidth = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bitstring.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.bitstring);
        }
        if self.bitwidth != 0 {
            my_size += ::protobuf::rt::value_size(2, self.bitwidth, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bitstring.is_empty() {
            os.write_bytes(1, &self.bitstring)?;
        }
        if self.bitwidth != 0 {
            os.write_int32(2, self.bitwidth)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4Varbit {
        P4Varbit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bitstring",
                |m: &P4Varbit| { &m.bitstring },
                |m: &mut P4Varbit| { &mut m.bitstring },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "bitwidth",
                |m: &P4Varbit| { &m.bitwidth },
                |m: &mut P4Varbit| { &mut m.bitwidth },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4Varbit>(
                "P4Varbit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4Varbit {
        static instance: ::protobuf::rt::LazyV2<P4Varbit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4Varbit::new)
    }
}

impl ::protobuf::Clear for P4Varbit {
    fn clear(&mut self) {
        self.bitstring.clear();
        self.bitwidth = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4Varbit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4Varbit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct P4StructLike {
    // message fields
    pub members: ::protobuf::RepeatedField<P4Data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4StructLike {
    fn default() -> &'a P4StructLike {
        <P4StructLike as ::protobuf::Message>::default_instance()
    }
}

impl P4StructLike {
    pub fn new() -> P4StructLike {
        ::std::default::Default::default()
    }

    // repeated .p4.v1.P4Data members = 1;


    pub fn get_members(&self) -> &[P4Data] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<P4Data>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<P4Data> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<P4Data> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for P4StructLike {
    fn is_initialized(&self) -> bool {
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.members {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4StructLike {
        P4StructLike::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<P4Data>>(
                "members",
                |m: &P4StructLike| { &m.members },
                |m: &mut P4StructLike| { &mut m.members },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4StructLike>(
                "P4StructLike",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4StructLike {
        static instance: ::protobuf::rt::LazyV2<P4StructLike> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4StructLike::new)
    }
}

impl ::protobuf::Clear for P4StructLike {
    fn clear(&mut self) {
        self.members.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4StructLike {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4StructLike {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct P4Header {
    // message fields
    pub is_valid: bool,
    pub bitstrings: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4Header {
    fn default() -> &'a P4Header {
        <P4Header as ::protobuf::Message>::default_instance()
    }
}

impl P4Header {
    pub fn new() -> P4Header {
        ::std::default::Default::default()
    }

    // bool is_valid = 1;


    pub fn get_is_valid(&self) -> bool {
        self.is_valid
    }
    pub fn clear_is_valid(&mut self) {
        self.is_valid = false;
    }

    // Param is passed by value, moved
    pub fn set_is_valid(&mut self, v: bool) {
        self.is_valid = v;
    }

    // repeated bytes bitstrings = 2;


    pub fn get_bitstrings(&self) -> &[::std::vec::Vec<u8>] {
        &self.bitstrings
    }
    pub fn clear_bitstrings(&mut self) {
        self.bitstrings.clear();
    }

    // Param is passed by value, moved
    pub fn set_bitstrings(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.bitstrings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bitstrings(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.bitstrings
    }

    // Take field
    pub fn take_bitstrings(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.bitstrings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for P4Header {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_valid = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.bitstrings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_valid != false {
            my_size += 2;
        }
        for value in &self.bitstrings {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_valid != false {
            os.write_bool(1, self.is_valid)?;
        }
        for v in &self.bitstrings {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4Header {
        P4Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_valid",
                |m: &P4Header| { &m.is_valid },
                |m: &mut P4Header| { &mut m.is_valid },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bitstrings",
                |m: &P4Header| { &m.bitstrings },
                |m: &mut P4Header| { &mut m.bitstrings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4Header>(
                "P4Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4Header {
        static instance: ::protobuf::rt::LazyV2<P4Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4Header::new)
    }
}

impl ::protobuf::Clear for P4Header {
    fn clear(&mut self) {
        self.is_valid = false;
        self.bitstrings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct P4HeaderUnion {
    // message fields
    pub valid_header_name: ::std::string::String,
    pub valid_header: ::protobuf::SingularPtrField<P4Header>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4HeaderUnion {
    fn default() -> &'a P4HeaderUnion {
        <P4HeaderUnion as ::protobuf::Message>::default_instance()
    }
}

impl P4HeaderUnion {
    pub fn new() -> P4HeaderUnion {
        ::std::default::Default::default()
    }

    // string valid_header_name = 1;


    pub fn get_valid_header_name(&self) -> &str {
        &self.valid_header_name
    }
    pub fn clear_valid_header_name(&mut self) {
        self.valid_header_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_valid_header_name(&mut self, v: ::std::string::String) {
        self.valid_header_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_valid_header_name(&mut self) -> &mut ::std::string::String {
        &mut self.valid_header_name
    }

    // Take field
    pub fn take_valid_header_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.valid_header_name, ::std::string::String::new())
    }

    // .p4.v1.P4Header valid_header = 2;


    pub fn get_valid_header(&self) -> &P4Header {
        self.valid_header.as_ref().unwrap_or_else(|| <P4Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_valid_header(&mut self) {
        self.valid_header.clear();
    }

    pub fn has_valid_header(&self) -> bool {
        self.valid_header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid_header(&mut self, v: P4Header) {
        self.valid_header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_valid_header(&mut self) -> &mut P4Header {
        if self.valid_header.is_none() {
            self.valid_header.set_default();
        }
        self.valid_header.as_mut().unwrap()
    }

    // Take field
    pub fn take_valid_header(&mut self) -> P4Header {
        self.valid_header.take().unwrap_or_else(|| P4Header::new())
    }
}

impl ::protobuf::Message for P4HeaderUnion {
    fn is_initialized(&self) -> bool {
        for v in &self.valid_header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.valid_header_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.valid_header)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.valid_header_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.valid_header_name);
        }
        if let Some(ref v) = self.valid_header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.valid_header_name.is_empty() {
            os.write_string(1, &self.valid_header_name)?;
        }
        if let Some(ref v) = self.valid_header.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4HeaderUnion {
        P4HeaderUnion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "valid_header_name",
                |m: &P4HeaderUnion| { &m.valid_header_name },
                |m: &mut P4HeaderUnion| { &mut m.valid_header_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<P4Header>>(
                "valid_header",
                |m: &P4HeaderUnion| { &m.valid_header },
                |m: &mut P4HeaderUnion| { &mut m.valid_header },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4HeaderUnion>(
                "P4HeaderUnion",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4HeaderUnion {
        static instance: ::protobuf::rt::LazyV2<P4HeaderUnion> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4HeaderUnion::new)
    }
}

impl ::protobuf::Clear for P4HeaderUnion {
    fn clear(&mut self) {
        self.valid_header_name.clear();
        self.valid_header.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4HeaderUnion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4HeaderUnion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct P4HeaderStack {
    // message fields
    pub entries: ::protobuf::RepeatedField<P4Header>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4HeaderStack {
    fn default() -> &'a P4HeaderStack {
        <P4HeaderStack as ::protobuf::Message>::default_instance()
    }
}

impl P4HeaderStack {
    pub fn new() -> P4HeaderStack {
        ::std::default::Default::default()
    }

    // repeated .p4.v1.P4Header entries = 1;


    pub fn get_entries(&self) -> &[P4Header] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<P4Header>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<P4Header> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<P4Header> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for P4HeaderStack {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4HeaderStack {
        P4HeaderStack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<P4Header>>(
                "entries",
                |m: &P4HeaderStack| { &m.entries },
                |m: &mut P4HeaderStack| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4HeaderStack>(
                "P4HeaderStack",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4HeaderStack {
        static instance: ::protobuf::rt::LazyV2<P4HeaderStack> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4HeaderStack::new)
    }
}

impl ::protobuf::Clear for P4HeaderStack {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4HeaderStack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4HeaderStack {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct P4HeaderUnionStack {
    // message fields
    pub entries: ::protobuf::RepeatedField<P4HeaderUnion>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a P4HeaderUnionStack {
    fn default() -> &'a P4HeaderUnionStack {
        <P4HeaderUnionStack as ::protobuf::Message>::default_instance()
    }
}

impl P4HeaderUnionStack {
    pub fn new() -> P4HeaderUnionStack {
        ::std::default::Default::default()
    }

    // repeated .p4.v1.P4HeaderUnion entries = 1;


    pub fn get_entries(&self) -> &[P4HeaderUnion] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<P4HeaderUnion>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<P4HeaderUnion> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<P4HeaderUnion> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for P4HeaderUnionStack {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> P4HeaderUnionStack {
        P4HeaderUnionStack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<P4HeaderUnion>>(
                "entries",
                |m: &P4HeaderUnionStack| { &m.entries },
                |m: &mut P4HeaderUnionStack| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<P4HeaderUnionStack>(
                "P4HeaderUnionStack",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static P4HeaderUnionStack {
        static instance: ::protobuf::rt::LazyV2<P4HeaderUnionStack> = ::protobuf::rt::LazyV2::INIT;
        instance.get(P4HeaderUnionStack::new)
    }
}

impl ::protobuf::Clear for P4HeaderUnionStack {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for P4HeaderUnionStack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for P4HeaderUnionStack {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12p4/v1/p4data.proto\x12\x05p4.v1\"\x88\x04\n\x06P4Data\x12\x1e\n\tb\
    itstring\x18\x01\x20\x01(\x0cH\0R\tbitstring\x12)\n\x06varbit\x18\x02\
    \x20\x01(\x0b2\x0f.p4.v1.P4VarbitH\0R\x06varbit\x12\x14\n\x04bool\x18\
    \x03\x20\x01(\x08H\0R\x04bool\x12+\n\x05tuple\x18\x04\x20\x01(\x0b2\x13.\
    p4.v1.P4StructLikeH\0R\x05tuple\x12-\n\x06struct\x18\x05\x20\x01(\x0b2\
    \x13.p4.v1.P4StructLikeH\0R\x06struct\x12)\n\x06header\x18\x06\x20\x01(\
    \x0b2\x0f.p4.v1.P4HeaderH\0R\x06header\x129\n\x0cheader_union\x18\x07\
    \x20\x01(\x0b2\x14.p4.v1.P4HeaderUnionH\0R\x0bheaderUnion\x129\n\x0chead\
    er_stack\x18\x08\x20\x01(\x0b2\x14.p4.v1.P4HeaderStackH\0R\x0bheaderStac\
    k\x12I\n\x12header_union_stack\x18\t\x20\x01(\x0b2\x19.p4.v1.P4HeaderUni\
    onStackH\0R\x10headerUnionStack\x12\x14\n\x04enum\x18\n\x20\x01(\tH\0R\
    \x04enum\x12\x16\n\x05error\x18\x0b\x20\x01(\tH\0R\x05error\x12\x1f\n\ne\
    num_value\x18\x0c\x20\x01(\x0cH\0R\tenumValueB\x06\n\x04data\"D\n\x08P4V\
    arbit\x12\x1c\n\tbitstring\x18\x01\x20\x01(\x0cR\tbitstring\x12\x1a\n\
    \x08bitwidth\x18\x02\x20\x01(\x05R\x08bitwidth\"7\n\x0cP4StructLike\x12'\
    \n\x07members\x18\x01\x20\x03(\x0b2\r.p4.v1.P4DataR\x07members\"E\n\x08P\
    4Header\x12\x19\n\x08is_valid\x18\x01\x20\x01(\x08R\x07isValid\x12\x1e\n\
    \nbitstrings\x18\x02\x20\x03(\x0cR\nbitstrings\"o\n\rP4HeaderUnion\x12*\
    \n\x11valid_header_name\x18\x01\x20\x01(\tR\x0fvalidHeaderName\x122\n\
    \x0cvalid_header\x18\x02\x20\x01(\x0b2\x0f.p4.v1.P4HeaderR\x0bvalidHeade\
    r\":\n\rP4HeaderStack\x12)\n\x07entries\x18\x01\x20\x03(\x0b2\x0f.p4.v1.\
    P4HeaderR\x07entries\"D\n\x12P4HeaderUnionStack\x12.\n\x07entries\x18\
    \x01\x20\x03(\x0b2\x14.p4.v1.P4HeaderUnionR\x07entriesB&Z$github.com/p4l\
    ang/p4runtime/go/p4/v1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
