import ofp4lib
function r_out_port(ismatch: bool): string {
    if (ismatch) "reg0" else "reg0[0..15]"
}
function r_out_group(ismatch: bool): string {
    if (ismatch) "reg0" else "reg0[16..31]"
}
function r_clone(ismatch: bool): string {
    if (ismatch) "reg1" else "reg1[0]"
}
function r_vlan(ismatch: bool): string {
    if (ismatch) "reg1" else "reg1[8..19]"
}
function r_flood(ismatch: bool): string {
    if (ismatch) "reg1" else "reg1[24]"
}
function r_SnvsIngress_output(ismatch: bool): string {
    if (ismatch) "reg2" else "reg2[0..15]"
}
function r_SnvsIngress_tmp(ismatch: bool): string {
    if (ismatch) "reg2" else "reg2[16]"
}
function r_SnvsIngress_tmp_3(ismatch: bool): string {
    if (ismatch) "reg2" else "reg2[24]"
}
function r_tmp_0(ismatch: bool): string {
    if (ismatch) "reg3" else "reg3[0]"
}
function r_tmp_1(ismatch: bool): string {
    if (ismatch) "reg3" else "reg3[8]"
}
function r_SnvsEgress_tag_vlan(ismatch: bool): string {
    if (ismatch) "reg3" else "reg3[16]"
}
function r_SnvsEgress_tmp_5(ismatch: bool): string {
    if (ismatch) "reg4" else "reg4[0..11]"
}
function r_SnvsEgress_tmp_6(ismatch: bool): string {
    if (ismatch) "reg3" else "reg3[24]"
}
function r_SnvsEgress_tmp_7(ismatch: bool): string {
    if (ismatch) "reg4" else "reg4[16]"
}
function r_key_0(ismatch: bool): string {
    if (ismatch) "reg4" else "reg4[24]"
}
output relation Flow[flow_t]
index Flow(s: string) on Flow(s)
input relation MulticastGroup[multicast_group_t]
// initialize output port and output group
Flow("table=0 actions=resubmit(,1)").

typedef PortID = bit<16>
typedef EthernetAddress = bit<48>
typedef VlanID = bit<12>
typedef SnvsIngress_MirrorDstDropAction = SnvsIngress_MirrorDstDropActionSnvsIngress_Drop{}
input relation SnvsIngress_MirrorDstDrop(port: bit<16>, action: SnvsIngress_MirrorDstDropAction)
typedef SnvsIngress_MirrorDstDropActionDefaultAction = SnvsIngress_MirrorDstDropDefaultAction_NoAction{}
input relation SnvsIngress_MirrorDstDropDefaultAction(action: SnvsIngress_MirrorDstDropActionDefaultAction)
typedef SnvsIngress_ReservedMcastDstDropAction = SnvsIngress_ReservedMcastDstDropActionSnvsIngress_Drop{}
input relation SnvsIngress_ReservedMcastDstDrop(dst: bit<48>, action: SnvsIngress_ReservedMcastDstDropAction)
typedef SnvsIngress_ReservedMcastDstDropActionDefaultAction = SnvsIngress_ReservedMcastDstDropDefaultAction_NoAction{}
input relation SnvsIngress_ReservedMcastDstDropDefaultAction(action: SnvsIngress_ReservedMcastDstDropActionDefaultAction)
typedef SnvsIngress_InputVlanAction = SnvsIngress_InputVlanActionSnvsIngress_Drop{} | SnvsIngress_InputVlanActionSnvsIngress_SetVlan{vid: VlanID} | SnvsIngress_InputVlanActionSnvsIngress_UseTaggedVlan{}
input relation SnvsIngress_InputVlan(port: bit<16>, has_vlan: bit<1>, vid: bit<12>, priority: bit<32>, action: SnvsIngress_InputVlanAction)
typedef SnvsIngress_FloodVlanAction = SnvsIngress_FloodVlanActionSnvsIngress_set_flood{}
input relation SnvsIngress_FloodVlan(vlan: bit<12>, action: SnvsIngress_FloodVlanAction)
typedef SnvsIngress_LearnedSrcAction = SnvsIngress_LearnedSrcAction_NoAction{}
input relation SnvsIngress_LearnedSrc(vlan: bit<12>, mac: bit<48>, port: bit<16>, action: SnvsIngress_LearnedSrcAction)
typedef SnvsIngress_LearnedDstAction = SnvsIngress_LearnedDstActionSnvsIngress_KnownDst{port: PortID}
input relation SnvsIngress_LearnedDst(vlan: bit<12>, mac: bit<48>, action: SnvsIngress_LearnedDstAction)
typedef SnvsIngress_LearnedDstActionDefaultAction = SnvsIngress_LearnedDstDefaultAction_NoAction{}
input relation SnvsIngress_LearnedDstDefaultAction(action: SnvsIngress_LearnedDstActionDefaultAction)
typedef SnvsEgress_OutputVlanAction = SnvsEgress_OutputVlanAction_NoAction{}
input relation SnvsEgress_OutputVlan(port: bit<16>, vlan: bit<12>, priority: bit<32>, action: SnvsEgress_OutputVlanAction)
typedef SnvsEgress_PriorityTaggingAction = SnvsEgress_PriorityTaggingAction_NoAction{}
input relation SnvsEgress_PriorityTagging(port: bit<16>, nonzero_pcp: bool, action: SnvsEgress_PriorityTaggingAction)
Flow("table=1 actions=resubmit(,2)").

// tbl_snvs156
Flow("table=2 actions=${actions}") :- var actions = "load(0->${r_vlan(false)}), load(0->${r_flood(false)}), resubmit(,3)".

// tbl_snvs156
Flow("table=2, priority=1 actions=load(0->${r_vlan(false)}), load(0->${r_flood(false)}), resubmit(,3)").

// SnvsIngress.MirrorDstDrop
Flow("table=3, in_port=${port} actions=${actions}") :- SnvsIngress_MirrorDstDrop(port, action),
   var actions = match(action) {
    SnvsIngress_MirrorDstDropActionSnvsIngress_Drop{} -> "load(0->${r_out_port(false)}), resubmit(,26)"
}.

// SnvsIngress.MirrorDstDrop
Flow("table=3 actions=${actions}") :- SnvsIngress_MirrorDstDropDefaultAction(action),
   var actions = "resubmit(,4)".

// SnvsIngress.ReservedMcastDstDrop
Flow("table=4, dl_dst=${dst} actions=${actions}") :- SnvsIngress_ReservedMcastDstDrop(dst, action),
   var actions = match(action) {
    SnvsIngress_ReservedMcastDstDropActionSnvsIngress_Drop{} -> "load(0->${r_out_port(false)}), resubmit(,26)"
}.

// SnvsIngress.ReservedMcastDstDrop
Flow("table=4 actions=${actions}") :- SnvsIngress_ReservedMcastDstDropDefaultAction(action),
   var actions = "resubmit(,5)".

// SnvsIngress.InputVlan
Flow("table=5, priority=${priority}, in_port=${port}, vlan_tci=${(has_vlan as bit<16> << 12) | vid as bit<16>}/0x1fff actions=${actions}") :- SnvsIngress_InputVlan(port, has_vlan, vid, priority, action),
   var actions = match(action) {
    SnvsIngress_InputVlanActionSnvsIngress_Drop{} -> "load(0->${r_out_port(false)}), resubmit(,26)",
    SnvsIngress_InputVlanActionSnvsIngress_SetVlan{vid_0} -> "move(${vid_0}->vlan_tci[0..11]), load(1->vlan_tci[12]), resubmit(,6)",
    SnvsIngress_InputVlanActionSnvsIngress_UseTaggedVlan{} -> "move(vlan_tci[0..11]->${r_vlan(false)}), resubmit(,6)"
}.

// SnvsIngress.InputVlan
Flow("table=5, priority=1 actions=load(0->${r_out_port(false)}), resubmit(,26)").

// tbl_snvs175
Flow("table=6 actions=${actions}") :- var actions = "load(0->${r_flood(false)}), resubmit(,7)".

// tbl_snvs175
Flow("table=6, priority=1 actions=load(0->${r_flood(false)}), resubmit(,7)").

// SnvsIngress.FloodVlan
Flow("table=7, ${r_vlan(true)}=${vlan as bit<32> << 8}/0xfff00 actions=${actions}") :- SnvsIngress_FloodVlan(vlan, action),
   var actions = match(action) {
    SnvsIngress_FloodVlanActionSnvsIngress_set_flood{} -> "load(1->${r_flood(false)}), resubmit(,8)"
}.

// SnvsIngress.FloodVlan
Flow("table=7, priority=1 actions=resubmit(,8)").

// IfStatement
Flow("table=8, priority=100, ${r_flood(true)}=${1 << 24}/0x1000000 actions=resubmit(,9)").

// IfStatement
Flow("table=8, priority=1 actions=resubmit(,10)").

// tbl_snvs180
Flow("table=9 actions=${actions}") :- var actions = "load(0->${r_SnvsIngress_tmp(false)}), resubmit(,13)".

// tbl_snvs180
Flow("table=9, priority=1 actions=load(0->${r_SnvsIngress_tmp(false)}), resubmit(,13)").

// IfStatement
Flow("table=10, priority=100, dl_src=${to_eth(0 << 40)}/01:00:00:00:00:00 actions=resubmit(,11)").

// IfStatement
Flow("table=10, priority=1 actions=resubmit(,12)").

// tbl_snvs180_0
Flow("table=11 actions=${actions}") :- var actions = "load(1->${r_SnvsIngress_tmp(false)}), resubmit(,13)".

// tbl_snvs180_0
Flow("table=11, priority=1 actions=load(1->${r_SnvsIngress_tmp(false)}), resubmit(,13)").

// tbl_snvs180_1
Flow("table=12 actions=${actions}") :- var actions = "load(0->${r_SnvsIngress_tmp(false)}), resubmit(,13)".

// tbl_snvs180_1
Flow("table=12, priority=1 actions=load(0->${r_SnvsIngress_tmp(false)}), resubmit(,13)").

// IfStatement
Flow("table=13, priority=100, ${r_SnvsIngress_tmp(true)}=${1 << 16}/0x10000 actions=resubmit(,14)").

// IfStatement
Flow("table=13, priority=1 actions=resubmit(,15)").

// SnvsIngress.LearnedSrc
Flow("table=14, dl_src=${mac}, in_port=${port}, ${r_vlan(true)}=${vlan as bit<32> << 8}/0xfff00 actions=${actions}") :- SnvsIngress_LearnedSrc(vlan, mac, port, action),
   var actions = match(action) {
    SnvsIngress_LearnedSrcAction_NoAction{} -> "resubmit(,15)"
}.

// SnvsIngress.LearnedSrc
Flow("table=14, priority=1 actions=resubmit(,15)").

// tbl_snvs192
Flow("table=15 actions=${actions}") :- var actions = "load(510->${r_SnvsIngress_output(false)}), resubmit(,16)".

// tbl_snvs192
Flow("table=15, priority=1 actions=load(510->${r_SnvsIngress_output(false)}), resubmit(,16)").

// IfStatement
Flow("table=16, priority=100, ${r_flood(true)}=${1 << 24}/0x1000000 actions=resubmit(,17)").

// IfStatement
Flow("table=16, priority=1 actions=resubmit(,18)").

// tbl_snvs193
Flow("table=17 actions=${actions}") :- var actions = "load(0->${r_SnvsIngress_tmp_3(false)}), resubmit(,21)".

// tbl_snvs193
Flow("table=17, priority=1 actions=load(0->${r_SnvsIngress_tmp_3(false)}), resubmit(,21)").

// IfStatement
Flow("table=18, priority=100, dl_dst=${to_eth(0 << 40)}/01:00:00:00:00:00 actions=resubmit(,19)").

// IfStatement
Flow("table=18, priority=1 actions=resubmit(,20)").

// tbl_snvs193_0
Flow("table=19 actions=${actions}") :- var actions = "load(1->${r_SnvsIngress_tmp_3(false)}), resubmit(,21)".

// tbl_snvs193_0
Flow("table=19, priority=1 actions=load(1->${r_SnvsIngress_tmp_3(false)}), resubmit(,21)").

// tbl_snvs193_1
Flow("table=20 actions=${actions}") :- var actions = "load(0->${r_SnvsIngress_tmp_3(false)}), resubmit(,21)".

// tbl_snvs193_1
Flow("table=20, priority=1 actions=load(0->${r_SnvsIngress_tmp_3(false)}), resubmit(,21)").

// IfStatement
Flow("table=21, priority=100, ${r_SnvsIngress_tmp_3(true)}=${1 << 24}/0x1000000 actions=resubmit(,22)").

// IfStatement
Flow("table=21, priority=1 actions=resubmit(,23)").

// SnvsIngress.LearnedDst
Flow("table=22, dl_dst=${mac}, ${r_vlan(true)}=${vlan as bit<32> << 8}/0xfff00 actions=${actions}") :- SnvsIngress_LearnedDst(vlan, mac, action),
   var actions = match(action) {
    SnvsIngress_LearnedDstActionSnvsIngress_KnownDst{port_1} -> "move(${port_1}->${r_SnvsIngress_output(false)}), resubmit(,23)"
}.

// SnvsIngress.LearnedDst
Flow("table=22 actions=${actions}") :- SnvsIngress_LearnedDstDefaultAction(action),
   var actions = "resubmit(,23)".

// IfStatement
Flow("table=23, priority=100, ${r_SnvsIngress_output(true)}=510/0xffff actions=resubmit(,24)").

// IfStatement
Flow("table=23, priority=1 actions=resubmit(,25)").

// tbl_snvs206
Flow("table=24 actions=${actions}") :- var actions = "move(${r_vlan(false)}->reg0[16..27]), load(0->reg0[28..31]), resubmit(,26)".

// tbl_snvs206
Flow("table=24, priority=1 actions=move(${r_vlan(false)}->reg0[16..27]), load(0->reg0[28..31]), resubmit(,26)").

// tbl_snvs208
Flow("table=25 actions=${actions}") :- var actions = "move(${r_SnvsIngress_output(false)}->${r_out_port(false)}), resubmit(,26)".

// tbl_snvs208
Flow("table=25, priority=1 actions=move(${r_SnvsIngress_output(false)}->${r_out_port(false)}), resubmit(,26)").

Flow("table=28 actions=resubmit(,29)").

// SnvsEgress.OutputVlan
Flow("table=29, priority=${priority}, ${r_out_port(true)}=${port}/0xffff, ${r_vlan(true)}=${vlan as bit<32> << 8}/0xfff00 actions=${actions}") :- SnvsEgress_OutputVlan(port, vlan, priority, action),
   var actions = match(action) {
    SnvsEgress_OutputVlanAction_NoAction{} -> "resubmit(,0)"
}.

// SnvsEgress.OutputVlan
Flow("table=29, priority=1 actions=resubmit(,0)").

// tbl_act
Flow("table=30 actions=${actions}") :- var actions = "load(1->${r_SnvsEgress_tag_vlan(false)}), resubmit(,32)".

// tbl_act
Flow("table=30, priority=1 actions=load(1->${r_SnvsEgress_tag_vlan(false)}), resubmit(,32)").

// tbl_act_0
Flow("table=31 actions=${actions}") :- var actions = "load(0->${r_SnvsEgress_tag_vlan(false)}), resubmit(,32)".

// tbl_act_0
Flow("table=31, priority=1 actions=load(0->${r_SnvsEgress_tag_vlan(false)}), resubmit(,32)").

// IfStatement
Flow("table=32, priority=100, ${r_SnvsEgress_tag_vlan(true)}=${1 << 16}/0x10000 actions=resubmit(,33)").

// IfStatement
Flow("table=32, priority=1 actions=resubmit(,34)").

// tbl_snvs256
Flow("table=33 actions=${actions}") :- var actions = "move(${r_vlan(false)}->${r_SnvsEgress_tmp_5(false)}), resubmit(,35)".

// tbl_snvs256
Flow("table=33, priority=1 actions=move(${r_vlan(false)}->${r_SnvsEgress_tmp_5(false)}), resubmit(,35)").

// tbl_snvs256_0
Flow("table=34 actions=${actions}") :- var actions = "load(0->${r_SnvsEgress_tmp_5(false)}), resubmit(,35)".

// tbl_snvs256_0
Flow("table=34, priority=1 actions=load(0->${r_SnvsEgress_tmp_5(false)}), resubmit(,35)").

// IfStatement
Flow("table=35, priority=100, ${r_SnvsEgress_tag_vlan(true)}=${1 << 16}/0x10000 actions=resubmit(,36)").

// IfStatement
Flow("table=35, priority=1 actions=resubmit(,37)").

// tbl_snvs257
Flow("table=36 actions=${actions}") :- var actions = "load(1->${r_SnvsEgress_tmp_6(false)}), resubmit(,47)".

// tbl_snvs257
Flow("table=36, priority=1 actions=load(1->${r_SnvsEgress_tmp_6(false)}), resubmit(,47)").

// IfStatement
Flow("table=37, priority=100, ${r_tmp_0(true)}=1/0x1, vlan_tci=${1 << 12}/0x1000 actions=resubmit(,38)").

// IfStatement
Flow("table=37, priority=1 actions=resubmit(,42)").

// IfStatement
Flow("table=38, priority=100, vlan_tci=${0 << 13}/0xe000 actions=resubmit(,39)").

// IfStatement
Flow("table=38, priority=1 actions=resubmit(,40)").

// tbl_snvs231
Flow("table=39 actions=${actions}") :- var actions = "load(0->${r_tmp_0(false)}), resubmit(,41)".

// tbl_snvs231
Flow("table=39, priority=1 actions=load(0->${r_tmp_0(false)}), resubmit(,41)").

// tbl_snvs231_0
Flow("table=40 actions=${actions}") :- var actions = "load(1->${r_tmp_0(false)}), resubmit(,41)".

// tbl_snvs231_0
Flow("table=40, priority=1 actions=load(1->${r_tmp_0(false)}), resubmit(,41)").

// tbl_snvs231_1
Flow("table=41 actions=${actions}") :- var actions = "load(1->${r_key_0(false)}), resubmit(,43)".

// tbl_snvs231_1
Flow("table=41, priority=1 actions=load(1->${r_key_0(false)}), resubmit(,43)").

// tbl_snvs231_2
Flow("table=42 actions=${actions}") :- var actions = "load(0->${r_key_0(false)}), resubmit(,43)".

// tbl_snvs231_2
Flow("table=42, priority=1 actions=load(0->${r_key_0(false)}), resubmit(,43)").

// SnvsEgress.PriorityTagging
Flow("table=43, ${r_out_port(true)}=${port}/0xffff, ${r_key_0(true)}=${(if (nonzero_pcp) 1 else 0) << 24}/0x1000000 actions=${actions}") :- SnvsEgress_PriorityTagging(port, nonzero_pcp, action),
   var actions = match(action) {
    SnvsEgress_PriorityTaggingAction_NoAction{} -> "resubmit(,0)"
}.

// SnvsEgress.PriorityTagging
Flow("table=43, priority=1 actions=resubmit(,0)").

// tbl_act_1
Flow("table=44 actions=${actions}") :- var actions = "load(1->${r_SnvsEgress_tmp_7(false)}), resubmit(,46)".

// tbl_act_1
Flow("table=44, priority=1 actions=load(1->${r_SnvsEgress_tmp_7(false)}), resubmit(,46)").

// tbl_act_2
Flow("table=45 actions=${actions}") :- var actions = "load(0->${r_SnvsEgress_tmp_7(false)}), resubmit(,46)".

// tbl_act_2
Flow("table=45, priority=1 actions=load(0->${r_SnvsEgress_tmp_7(false)}), resubmit(,46)").

// tbl_snvs257_0
Flow("table=46 actions=${actions}") :- var actions = "move(${r_SnvsEgress_tmp_7(false)}->${r_SnvsEgress_tmp_6(false)}), resubmit(,47)".

// tbl_snvs257_0
Flow("table=46, priority=1 actions=move(${r_SnvsEgress_tmp_7(false)}->${r_SnvsEgress_tmp_6(false)}), resubmit(,47)").

// IfStatement
Flow("table=47, priority=100, ${r_SnvsEgress_tmp_6(true)}=${1 << 24}/0x1000000, vlan_tci=${0 << 12}/0x1000 actions=resubmit(,48)").

// IfStatement
Flow("table=47, priority=1 actions=resubmit(,49)").

// tbl_snvs259
Flow("table=48 actions=${actions}") :- var actions = "load(1->vlan_tci[12]), move(${r_SnvsEgress_tmp_5(false)}->vlan_tci[0..11]), resubmit(,54)".

// tbl_snvs259
Flow("table=48, priority=1 actions=load(1->vlan_tci[12]), move(${r_SnvsEgress_tmp_5(false)}->vlan_tci[0..11]), resubmit(,54)").

// IfStatement
Flow("table=49, priority=100, ${r_tmp_1(true)}=${1 << 8}/0x100, vlan_tci=${1 << 12}/0x1000 actions=resubmit(,50)").

// IfStatement
Flow("table=49, priority=1 actions=resubmit(,54)").

// IfStatement
Flow("table=50, priority=100, ${r_SnvsEgress_tmp_6(true)}=${1 << 24}/0x1000000 actions=resubmit(,51)").

// IfStatement
Flow("table=50, priority=1 actions=resubmit(,52)").

// tbl_snvs261
Flow("table=51 actions=${actions}") :- var actions = "load(0->${r_tmp_1(false)}), resubmit(,53)".

// tbl_snvs261
Flow("table=51, priority=1 actions=load(0->${r_tmp_1(false)}), resubmit(,53)").

// tbl_snvs261_0
Flow("table=52 actions=${actions}") :- var actions = "load(1->${r_tmp_1(false)}), resubmit(,53)".

// tbl_snvs261_0
Flow("table=52, priority=1 actions=load(1->${r_tmp_1(false)}), resubmit(,53)").

// tbl_snvs262
Flow("table=53 actions=${actions}") :- var actions = "load(0->vlan_tci[12]), resubmit(,54)".

// tbl_snvs262
Flow("table=53, priority=1 actions=load(0->vlan_tci[12]), resubmit(,54)").

// drop if output port is 0
Flow("table=54, priority=100, ${r_out_port(true)}=0/0xffff actions=drop").

// send to chosen port
Flow("table=54 actions=output(${r_out_port(false)})").

// jump to multicast table
Flow("table=26 actions=resubmit(,27)").

// if multicast group is 0 just forward
Flow("table=27, ${r_out_group(true)}=${0 << 16}/0xffff0000 actions=resubmit(,28)").

// multicast
Flow("table=27, ${r_out_group(true)}=${mcast_id as bit<32> << 16}/0xffff0000 actions=${outputs}") :- MulticastGroup(mcast_id, port),
   var outputs = "clone(move(${port}->${r_out_port(false)}), resubmit(,27))".group_by(mcast_id).to_vec().join(", ").

