/* -*-C++-*- */
/** \addtogroup irdefs
  * @{
  */
/*
   Internal representation of a DDlog programs
   The toString() method is used to serialize a DDlog program to text.
*/

interface IDDlogNode{}

class DDlogImport : IDDlogNode {
    ID module;
    cstring toString() const override { return "import " + module; }
#nodbprint
}

class DDlogTypeString : Type, IDDlogNode {
    toString{ return cstring("string"); }
    const Type* getP4Type() const override { return this; }
#nodbprint
}

class DDlogTypedef : Type_Declaration, IDDlogNode {
    Type type;
    const Type* getP4Type() const override { return this; }
    toString{ return cstring("typedef ") + name.toString() + " = " + type->toString(); }
#nodbprint
}

/// A union type
class DDlogTypeAlt : Type, IDDlogNode {
    inline Vector<Type>   alternatives;
    cstring toString() const override;
    const Type* getP4Type() const override { return this; }
#nodbprint
}

class DDlogTypeStruct : Type_StructLike, IDDlogNode {
    cstring toString() const override;
#nodbprint
}

/// Option<T>
class DDlogTypeOption : Type, IDDlogNode {
    Type type;
    toString{ return cstring("Option<") + type->toString() + ">"; }
    const Type* getP4Type() const override { return this; }  // not used
#nodbprint
}

class DDlogFunction : Declaration, IDDlogNode {
    Type returnType;
    ParameterList parameters;
    DDlogExpression body;
    cstring toString() const override;
#nodbprint
}

/// Relation declaration using syntactic sugar for a struct type,
/// e.g. relation MyRelation(field1: type1, field2: type2, ...)
class DDlogRelationSugared : Declaration, IDDlogNode {
    Direction direction;
    inline IndexedVector<Parameter> parameters;
    cstring toString() const override;
#nodbprint
}

/// Relation declaration with direct type name,
/// e.g. relation MyRelation[my_type_t]
class DDlogRelationDirect : Declaration, IDDlogNode {
    Direction direction;
    Type recordType;
    cstring toString() const override;
#nodbprint
}

class DDlogIndex : Declaration, IDDlogNode {
    inline IndexedVector<Parameter> parameters;
    ID relation;
    inline std::vector<ID> formals;
    cstring toString() const override;
#nodbprint
}

/// Expressions
abstract DDlogExpression : IDDlogNode {}

class DDlogStringLiteral : DDlogExpression {
    cstring contents;
    toString{ return cstring("\"") + contents.escapeJson() + "\""; }
#nodbprint
}

class DDlogLiteral : DDlogExpression {
    cstring contents;
    toString{ return contents; }
#nodbprint
}

class DDlogSetExpression : DDlogExpression {
    cstring variable;
    DDlogExpression rhs;
    toString{ return cstring("var ") + variable + " = " + rhs->toString(); }
#nodbprint
}

class DDlogMatchCase : IDDlogNode {
    DDlogExpression label;
    DDlogExpression result;
    toString{ return label->toString() + " -> " + result->toString(); }
#nodbprint
}

class DDlogIfExpression : DDlogExpression {
    DDlogExpression condition;
    DDlogExpression left;
    DDlogExpression right;
    cstring toString() const override;
#nodbprint
}

class DDlogMatchExpression : DDlogExpression {
    DDlogExpression matched;
    inline Vector<DDlogMatchCase> cases;
    cstring toString() const override;
#nodbprint
}

class DDlogVarName : DDlogExpression {
    ID id;
    toString{ return id; }
#nodbprint
}

class DDlogTupleExpression : DDlogExpression {
    inline Vector<DDlogExpression> components;
    cstring toString() const override;
#nodbprint
}

// left.function(arguments)
class DDlogApply : DDlogExpression {
    cstring function;
    DDlogExpression left;
    inline Vector<DDlogExpression> arguments;
    cstring toString() const override;
#nodbprint
}

class DDlogConstructorExpression : DDlogExpression {
    cstring constructor;
    std::vector<cstring> arguments;
    cstring toString() const override;
#nodbprint
}

/// Terms in a rule
abstract DDlogTerm : IDDlogNode {}

/// An atom is a term of the form Relation(arguments)
// We never use negated rules in out code generator.
class DDlogAtom : DDlogTerm {
    IR::ID relation;
    // In general a TupleExpression
    DDlogExpression expression;
    cstring toString() const override;
#nodbprint
}

/// An expression that appears as a term, e.g.,
/// x = y
class DDlogExpressionTerm : DDlogTerm {
    DDlogExpression expression;
    toString{ return expression->toString(); }
#nodbprint
}

class DDlogRule : IDDlogNode {
    DDlogTerm lhs;
    inline Vector<DDlogTerm> rhs;
    optional cstring comment;
    cstring toString() const override;
#nodbprint
}

class DDlogProgram : IDDlogNode {
    Vector<Node> declarations;
    void emit(std::ostream &o) const;
#nodbprint
}

/** @} *//* end group irdefs */
