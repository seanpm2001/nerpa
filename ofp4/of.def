/* -*-C++-*- */
/** \addtogroup irdefs
  * @{
  */
/*
   Internal representation of an Open Flow program (fragment).
*/

interface IOF_Node {}

abstract OF_Match : IOF_Node {}

abstract OF_Action : IOF_Node {}

class OF_TableMatch : OF_Match {
    size_t id;
    cstring toString() const override;
#nodbprint
}

abstract OF_Expression : IOF_Node {}

class OF_Constant : OF_Expression {
    Constant value;
    OF_Constant(int v) { value = new Constant(v); }
    cstring toString() const override;
#nodbprint
}

class OF_Register : OF_Expression {
    static const size_t maxRegister;  // maximum register number
    static const size_t registerSize;  // size of a register in bits
    static const size_t maxBundleSize;  // xxreg0 has 4 registers, i.e. 128 bits

    cstring name;   // e.g. "xreg1"
    size_t size;    // Field size in bits
    size_t low;     // Low bit number
    size_t high;    // High bit number
    bool   is_boolean;  // True if this represents a boolean P4 value
    optional cstring friendlyName;
    cstring toString() const;
    /// Generates a DDlog expression that returns the register at runtime.
    cstring asDDlogString(bool inMatch) const;
    void validate() const;
#emit
    Constant mask() const;
#end
    bool isSlice() const { return low != 0 || high != size - 1; }
    OF_Register lowBits(size_t n) const;
    OF_Register highBits(size_t n) const;
#nodbprint
}

/// Build an expression from a DDlog interpolated variable
class OF_InterpolatedVarExpression : OF_Expression {
    cstring varname;
    toString { return "${" + varname + "}"; }
#nodbprint
}

class OF_Slice : OF_Expression {
    OF_Expression base;
    size_t high;
    size_t low;
    cstring toString() const override;
#nodbprint
}

class OF_EqualsMatch : OF_Match {
    OF_Expression left;
    OF_Expression right;
    cstring toString() const override;
#nodbprint
}

class OF_PriorityMatch : OF_Match {
    OF_Expression priority;
    cstring toString() const override;
#nodbprint
}

class OF_PrereqMatch : OF_Match {
    cstring prereq;
    toString { return prereq; }
#nodbprint
}

// E.g., "tcp"
class OF_ProtocolMatch : OF_Match {
    cstring proto;
    cstring toString() const override;
#nodbprint
}

/// A sequence of matches
class OF_SeqMatch : OF_Match {
    optional inline Vector<OF_Match> matches;
    toString{
        cstring result = "";
        for (auto s : matches) {
            if (result != "")
                result += " ";
            result += s->toString();
        }
        return result;
    }
    void push_back(OF_Match m) {
        if (auto sequence = m->to<IR::OF_SeqMatch>()) {
            matches.append(sequence->matches);
        } else {
            matches.push_back(m);
        }
    }
#nodbprint
}

class OF_EmptyAction : OF_Action {
    toString{ return ""; }
#nodbprint
}

class OF_ExplicitAction : OF_Action {
    cstring action;
    toString{ return action; }
#nodbprint
}

/// Match followed by an action.
class OF_MatchAndAction : IOF_Node {
    OF_Match match;
    OF_Action action;
    cstring toString() const override;
#nodbprint
}

class OF_MoveAction : OF_Action {
    OF_Expression src;
    OF_Expression dest;
    cstring toString() const override;
#nodbprint
}

class OF_LoadAction : OF_Action {
    OF_Expression src;
    OF_Expression dest;
    cstring toString() const override;
#nodbprint
}

class OF_ResubmitAction : OF_Action {
    size_t nextTable;
    cstring toString() const override;
#nodbprint
}

/// Build an action from a DDlog interpolated variable
class OF_InterpolatedVariableAction : OF_Action {
    cstring varname;
    toString { return "${" + varname + "}"; }
#nodbprint
}

/// A sequence of two actions
class OF_SeqAction : OF_Action {
    OF_Action left;
    OF_Action right;
    cstring toString() const override;
    validate{
        BUG_CHECK(!left->is<OF_DropAction>() &&
                  !right->is<OF_DropAction>(),
                  "%1%: Drop cannot be used in a sequence", this);
    }
#nodbprint
}

class OF_DropAction : OF_Action {
    toString{ return "drop"; }
#nodbprint
}

class OF_CloneAction : OF_Action {
    OF_Action action;
    toString{ return "clone(" + action->toString() + ")"; }
#nodbprint
}

class OF_OutputAction : OF_Action {
    // Limited to constants and slices of fields and registers
    OF_Expression dest;
    toString{ return "output(" + dest->toString() + ")"; }
#nodbprint
}

/** @} *//* end group irdefs */
